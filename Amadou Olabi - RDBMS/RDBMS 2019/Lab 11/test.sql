SETSEVEROUPUT ON;
CREATE OR REPLACE TRIGGER demo_trigger_types1
BEFORE DELETE OR INSERT OR UPDATE ON employees
--FOR EACH ROW
--DECLARE
BEGIN
dbms_output.put_line(’Row Level Trigger Fires . ’);
END;


--------------------TASK1--------------------------------------
CREATE TABLE product 
(
	product_id number(5), 
	product_name varchar2(32), 
	supplier_name varchar2(32), 
	unit_price number(7,2)
 );
 INSERT INTO PRODUCT VALUES(1,'RICE','APPLE',325);
 INSERT INTO PRODUCT VALUES(2,'PRIYANI','MICROSOFT',653);
 INSERT INTO PRODUCT VALUES(3,'NOODLES','IUT',543);
  INSERT INTO PRODUCT VALUES(4,'FOOD','DHAKA',443);
 BEGIN
	INSERT INTO PRODUCT VALUES(11,'HR','UK',500);
	COMMIT;
	END;
	/
CREATE OR REPLACE PRODUCT_TRIGGER
AFTER INSERT 
ON PRODUCT
DECLARE
	LOG_ACTION PRODUCT_LOG.ACTION%TYPE;
BEGIN
	IF INSERT THEN
	LOG_ACTION THEN
		LOG_ACTION :='INSERT';
	ELSE DBMS_OUPTUT.PUT_LINE('THIS CODE IS NOT OKAY');
	END IF;
	INSERT INTO PRODUCT_LOG (LOG_DATE,ACTION) VALUES(SYSDATE,LOG_ACTION);
	END;
	/
	
	
CREATE OR REPLACE TRIGGER OLD_TRIGGER
	AFTER INSERT ON PRODUCT
	FOR EACH ROW
	
	WHEN (NEW.PRODUCT_ID > 0)
	DECLARE
	--sal_diff number;
	ID NUMBER; NAME VARCHAR2(20);SUPPLIER VARCHAR2(30);PRICE NUMBER(7,2);
	BEGIN
	
	ID := NEW.PRODUCT_ID; NAME := NEW.PRODUCT_NAME; SUPPLIER := NEW.SUPPLIER_NAME;
	PRICE := unit_price;
	DMBS_OUTPUT.PUT('NEW ROW IS INSERTED '||:ID);
	DBMS_OUTPUT.PUT(' '|| :NAME);
	DBMS_OUPTUT.PUT(' '|| :SUPPLIER);
	DBMS_OUPTUT.PUT(' '|| :PRICE);
	END;
	/
-----------------------------------TASK2------------------------	
	CREATE TABLE CITIZEN(
		ID VARCHAR2(20),
		NAME VARCHAR2(20),
		DV VARCHAR2(20),
		DOB DATE
		);
		INSERT INTO CITIZEN(NAME,DV,DOB) VALUES('KAAL','D9',(TO_DATE('2004/06/12 ','YYYY/MM/DD')));
		INSERT INTO CITIZEN(NAME,DV,DOB) VALUES('HUSSEIN','E1',(TO_DATE('2010/03/8 ', 'YYYY/MM/DD')));
		INSERT INTO CITIZEN(NAME,DV,DOB) VALUES('ALI','A1',(TO_DATE('2011/11/21 ', 'YYYY/MM/DD')));
		INSERT INTO CITIZEN(NAME,DV,DOB) VALUES('ABDILAAHI','C4',(TO_DATE('2018/12/22 ', 'YYYY/MM/DD')));
	
	CREATE OR REPLACE FUNCTION Gen_ID(DV IN VARCHAR2,DOB IN VARCHAR2) 
	RETURN VARCHAR2
	IS
	BEGIN
	CREATE SEQUENCE ID
	MINVALUE 1
	MAXVALUE 9999999
	START WITH 0000000
	INCREMENT BY 1
	CACHE 20
	
	--SUMSTRING :=CONCAT (DV,DOB);
	SUMSTRING2 := CONCAT (DV,DOB,ID.NEXTVAL)
	
		--RETURN ('GENERATE ' || DV,DOB,ID.NEXTVAL);
		RETURN ('GENERATED ' || SUMSTRING2);
		END;
	/
	
		
		CREATE or replace TRIGGER  AFTER_INSERT 
		BEFORE INSERT ON  PRODUCT 
		FOR EACH ROW
		DECLARE
	BEGIN
		IF :NEW.ID  IS NULL THEN
		:new.id := '000000'||ID.nextval;
  END IF;
END;